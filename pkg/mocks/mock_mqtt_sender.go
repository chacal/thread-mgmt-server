// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chacal/thread-mgmt-server/pkg/mqtt (interfaces: MqttSender)

// Package mocks is a generated GoMock package.
package mocks

import (
	device_registry "github.com/chacal/thread-mgmt-server/pkg/device_registry"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMqttSender is a mock of MqttSender interface
type MockMqttSender struct {
	ctrl     *gomock.Controller
	recorder *MockMqttSenderMockRecorder
}

// MockMqttSenderMockRecorder is the mock recorder for MockMqttSender
type MockMqttSenderMockRecorder struct {
	mock *MockMqttSender
}

// NewMockMqttSender creates a new mock instance
func NewMockMqttSender(ctrl *gomock.Controller) *MockMqttSender {
	mock := &MockMqttSender{ctrl: ctrl}
	mock.recorder = &MockMqttSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMqttSender) EXPECT() *MockMqttSenderMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockMqttSender) Connect() chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(chan bool)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockMqttSenderMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMqttSender)(nil).Connect))
}

// PublishState mocks base method
func (m *MockMqttSender) PublishState(arg0 device_registry.State) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishState", arg0)
}

// PublishState indicates an expected call of PublishState
func (mr *MockMqttSenderMockRecorder) PublishState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishState", reflect.TypeOf((*MockMqttSender)(nil).PublishState), arg0)
}
