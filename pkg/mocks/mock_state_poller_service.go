// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chacal/thread-mgmt-server/pkg/state_poller_service (interfaces: StatePollerService)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStatePollerService is a mock of StatePollerService interface
type MockStatePollerService struct {
	ctrl     *gomock.Controller
	recorder *MockStatePollerServiceMockRecorder
}

// MockStatePollerServiceMockRecorder is the mock recorder for MockStatePollerService
type MockStatePollerServiceMockRecorder struct {
	mock *MockStatePollerService
}

// NewMockStatePollerService creates a new mock instance
func NewMockStatePollerService(ctrl *gomock.Controller) *MockStatePollerService {
	mock := &MockStatePollerService{ctrl: ctrl}
	mock.recorder = &MockStatePollerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatePollerService) EXPECT() *MockStatePollerServiceMockRecorder {
	return m.recorder
}

// Refresh mocks base method
func (m *MockStatePollerService) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh
func (mr *MockStatePollerServiceMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockStatePollerService)(nil).Refresh))
}

// Start mocks base method
func (m *MockStatePollerService) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockStatePollerServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStatePollerService)(nil).Start))
}

// Stop mocks base method
func (m *MockStatePollerService) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockStatePollerServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStatePollerService)(nil).Stop))
}
