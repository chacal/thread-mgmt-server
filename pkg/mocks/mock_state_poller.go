// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chacal/thread-mgmt-server/pkg/state_poller_service (interfaces: StatePoller)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockStatePoller is a mock of StatePoller interface
type MockStatePoller struct {
	ctrl     *gomock.Controller
	recorder *MockStatePollerMockRecorder
}

// MockStatePollerMockRecorder is the mock recorder for MockStatePoller
type MockStatePollerMockRecorder struct {
	mock *MockStatePoller
}

// NewMockStatePoller creates a new mock instance
func NewMockStatePoller(ctrl *gomock.Controller) *MockStatePoller {
	mock := &MockStatePoller{ctrl: ctrl}
	mock.recorder = &MockStatePollerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatePoller) EXPECT() *MockStatePollerMockRecorder {
	return m.recorder
}

// Refresh mocks base method
func (m *MockStatePoller) Refresh(arg0 int, arg1 net.IP) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Refresh", arg0, arg1)
}

// Refresh indicates an expected call of Refresh
func (mr *MockStatePollerMockRecorder) Refresh(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockStatePoller)(nil).Refresh), arg0, arg1)
}

// Start mocks base method
func (m *MockStatePoller) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockStatePollerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStatePoller)(nil).Start))
}

// Stop mocks base method
func (m *MockStatePoller) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockStatePollerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStatePoller)(nil).Stop))
}
